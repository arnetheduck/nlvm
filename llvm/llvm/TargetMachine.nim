## ===-- llvm-c/TargetMachine.h - Target Machine Library C Interface - C++ -*-=*\
## |*                                                                            *|
## |*                     The LLVM Compiler Infrastructure                       *|
## |*                                                                            *|
## |* This file is distributed under the University of Illinois Open Source      *|
## |* License. See LICENSE.TXT for details.                                      *|
## |*                                                                            *|
## |*===----------------------------------------------------------------------===*|
## |*                                                                            *|
## |* This header declares the C interface to the Target and TargetMachine       *|
## |* classes, which can be used to generate assembly or object files.           *|
## |*                                                                            *|
## |* Many exotic languages can interoperate with C code but have a harder time  *|
## |* with C++ due to name mangling. So in addition to C, this interface enables *|
## |* tools written in such languages.                                           *|
## |*                                                                            *|
## \*===----------------------------------------------------------------------===

type
  TargetMachineRef* = ptr OpaqueTargetMachine
  TargetRef* = ptr target
  CodeGenOptLevel* {.size: sizeof(cint).} = enum
    CodeGenLevelNone, CodeGenLevelLess, CodeGenLevelDefault, CodeGenLevelAggressive
  RelocMode* {.size: sizeof(cint).} = enum
    RelocDefault, RelocStatic, RelocPIC, RelocDynamicNoPic
  CodeModel* {.size: sizeof(cint).} = enum
    CodeModelDefault, CodeModelJITDefault, CodeModelSmall, CodeModelKernel,
    CodeModelMedium, CodeModelLarge
  CodeGenFileType* {.size: sizeof(cint).} = enum
    AssemblyFile, ObjectFile





## * Returns the first llvm::Target in the registered targets list.

proc getFirstTarget*(): TargetRef {.importc: "LLVMGetFirstTarget", llvmImport.}
## * Returns the next llvm::Target given a previous one (or null if there's none)

proc getNextTarget*(t: TargetRef): TargetRef {.importc: "LLVMGetNextTarget",
    llvmImport.}
## ===-- Target ------------------------------------------------------------===
## * Finds the target corresponding to the given name and stores it in \p T.
##   Returns 0 on success.

proc getTargetFromName*(name: cstring): TargetRef {.
    importc: "LLVMGetTargetFromName", llvmImport.}
## * Finds the target corresponding to the given triple and stores it in \p T.
##   Returns 0 on success. Optionally returns any error in ErrorMessage.
##   Use LLVMDisposeMessage to dispose the message.

proc getTargetFromTriple*(triple: cstring; t: ptr TargetRef;
                         errorMessage: cstringArray): Bool {.
    importc: "LLVMGetTargetFromTriple", llvmImport.}
## * Returns the name of a target. See llvm::Target::getName

proc getTargetName*(t: TargetRef): cstring {.importc: "LLVMGetTargetName",
    llvmImport.}
## * Returns the description  of a target. See llvm::Target::getDescription

proc getTargetDescription*(t: TargetRef): cstring {.
    importc: "LLVMGetTargetDescription", llvmImport.}
## * Returns if the target has a JIT

proc targetHasJIT*(t: TargetRef): Bool {.importc: "LLVMTargetHasJIT", llvmImport.}
## * Returns if the target has a TargetMachine associated

proc targetHasTargetMachine*(t: TargetRef): Bool {.
    importc: "LLVMTargetHasTargetMachine", llvmImport.}
## * Returns if the target as an ASM backend (required for emitting output)

proc targetHasAsmBackend*(t: TargetRef): Bool {.importc: "LLVMTargetHasAsmBackend",
    llvmImport.}
## ===-- Target Machine ----------------------------------------------------===
## * Creates a new llvm::TargetMachine. See llvm::Target::createTargetMachine

proc createTargetMachine*(t: TargetRef; triple: cstring; cpu: cstring;
                         features: cstring; level: CodeGenOptLevel;
                         reloc: RelocMode; codeModel: CodeModel): TargetMachineRef {.
    importc: "LLVMCreateTargetMachine", llvmImport.}
## * Dispose the LLVMTargetMachineRef instance generated by
##   LLVMCreateTargetMachine.

proc disposeTargetMachine*(t: TargetMachineRef) {.
    importc: "LLVMDisposeTargetMachine", llvmImport.}
## * Returns the Target used in a TargetMachine

proc getTargetMachineTarget*(t: TargetMachineRef): TargetRef {.
    importc: "LLVMGetTargetMachineTarget", llvmImport.}
## * Returns the triple used creating this target machine. See
##   llvm::TargetMachine::getTriple. The result needs to be disposed with
##   LLVMDisposeMessage.

proc getTargetMachineTriple*(t: TargetMachineRef): cstring {.
    importc: "LLVMGetTargetMachineTriple", llvmImport.}
## * Returns the cpu used creating this target machine. See
##   llvm::TargetMachine::getCPU. The result needs to be disposed with
##   LLVMDisposeMessage.

proc getTargetMachineCPU*(t: TargetMachineRef): cstring {.
    importc: "LLVMGetTargetMachineCPU", llvmImport.}
## * Returns the feature string used creating this target machine. See
##   llvm::TargetMachine::getFeatureString. The result needs to be disposed with
##   LLVMDisposeMessage.

proc getTargetMachineFeatureString*(t: TargetMachineRef): cstring {.
    importc: "LLVMGetTargetMachineFeatureString", llvmImport.}
## * Create a DataLayout based on the targetMachine.

proc createTargetDataLayout*(t: TargetMachineRef): TargetDataRef {.
    importc: "LLVMCreateTargetDataLayout", llvmImport.}
## * Set the target machine's ASM verbosity.

proc setTargetMachineAsmVerbosity*(t: TargetMachineRef; verboseAsm: Bool) {.
    importc: "LLVMSetTargetMachineAsmVerbosity", llvmImport.}
## * Emits an asm or object file for the given module to the filename. This
##   wraps several c++ only classes (among them a file stream). Returns any
##   error in ErrorMessage. Use LLVMDisposeMessage to dispose the message.

proc targetMachineEmitToFile*(t: TargetMachineRef; m: ModuleRef; filename: cstring;
                             codegen: CodeGenFileType; errorMessage: cstringArray): Bool {.
    importc: "LLVMTargetMachineEmitToFile", llvmImport.}
## * Compile the LLVM IR stored in \p M and store the result in \p OutMemBuf.

proc targetMachineEmitToMemoryBuffer*(t: TargetMachineRef; m: ModuleRef;
                                     codegen: CodeGenFileType;
                                     errorMessage: cstringArray;
                                     outMemBuf: ptr MemoryBufferRef): Bool {.
    importc: "LLVMTargetMachineEmitToMemoryBuffer", llvmImport.}
## ===-- Triple ------------------------------------------------------------===
## * Get a triple for the host machine as a string. The result needs to be
##   disposed with LLVMDisposeMessage.

proc getDefaultTargetTriple*(): cstring {.importc: "LLVMGetDefaultTargetTriple",
                                       llvmImport.}
## * Adds the target-specific analysis passes to the pass manager.

proc addAnalysisPasses*(t: TargetMachineRef; pm: PassManagerRef) {.
    importc: "LLVMAddAnalysisPasses", llvmImport.}